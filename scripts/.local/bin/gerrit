#!/bin/sh

set -eu

# Colors for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Helpers
print_table() {
  column -t -s $'\t'
}

header() {
  echo "CHANGE\tPROJECT\tOWNER\tREVIEWERS\tSTATUS\tSUBJECT\tURL"
  echo "------\t--------\t-------------------\t---------------------\t--------\t----------------------------------------\t---------------------------------------------"
}

query_gerrit() {
  ssh gerrit gerrit query "$@" --format=JSON --all-reviewers |
    jq -r '
  select(.type != "stats") |
  [
    .number,
    .project,
    .owner.name,
    (.allReviewers | map(.name | split(" ")[0]) | unique | join(", ")),
    .status,
    (.subject | if length > 40 then (.[:37] + "...") else . end),
    .url
  ] | @tsv'
}

check_git_dir() {
  if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "${RED}[ERROR]${NC} Not inside a Git repository."
    exit 1
  fi
}

# Ensure jq and ssh are present
if ! command -v jq >/dev/null 2>&1 || ! command -v ssh >/dev/null 2>&1; then
  echo "${RED}[ERROR]${NC} This script requires both jq and ssh."
  echo "Please install them using your package manager."
  exit 1
fi

# Check if Gerrit host exists in SSH config
check_gerrit_ssh() {
  gerrit_host="gerrit"
  found=0

  # Check the main SSH config
  if [ -f "$HOME/.ssh/config" ]; then
    if grep -q "^[[:space:]]*Host[[:space:]]\+$gerrit_host\(\s\|$\)" "$HOME/.ssh/config"*; then
      found=1
    fi
  fi

  # Check all files under ~/.ssh/config.d/
  if [ $found -eq 0 ] && [ -d "$HOME/.ssh/config.d" ]; then
    for file in "$HOME/.ssh/config.d/"*; do
      [ -f "$file" ] || continue
      if grep -q "^[[:space:]]*Host[[:space:]]\+$gerrit_host\(\s\|$\)" "$file"; then
        found=1
        break
      fi
    done
  fi

  if [ $found -eq 0 ]; then
    echo "${RED}[ERROR]${NC} Gerrit host '$gerrit_host' not found in your SSH config."
    echo "Please add an entry like:"
    echo "  Host gerrit"
    echo "    HostName gerrit.example.com"
    echo "    User <your-username>"
    echo "    IdentityFile ~/.ssh/id_rsa"
    exit 1
  fi
}

pull_submission_to_local() {
  local CHANGE_ID="$1"
  local PATCHSET_ID="${2:-}"
  local LAST_TWO=$(echo "$CHANGE_ID" | awk '{print substr($0, length($0)-1, 2)}')

  echo "${YELLOW}It's safer to switch to change ID's target branch before applying this change.${NC}"
  read -r -p "Continue anyway? [y/N]: " confirm
  [[ ! "$confirm" =~ ^[Yy]$ ]] && echo "${CYAN}Aborting.${NC}" && return 1

  # Gerrit ref path: refs/changes/<last two digits>/<submission id>/<patchset id>
  if [ -z "$PATCHSET_ID" ]; then
    # Get latest patchset dynamically
    echo "${YELLOW}Finding the latest patchset for change ID ${CHANGE_ID}...${NC}"
    REF_LINK=$(git ls-remote origin "refs/changes/${LAST_TWO}/${CHANGE_ID}/*" | sort -t/ -k5 -n | tail -n1 | awk '{print $2}')
  else
    REF_LINK="refs/changes/${LAST_TWO}/${CHANGE_ID}/${PATCHSET_ID}"
  fi

  if [ -z "$REF_LINK" ]; then
    echo "${RED}Could not find change ID $CHANGE_ID${NC}"
    exit 1
  fi

  # Save current work safely
  if ! git diff --quiet || ! git diff --cached --quiet || [ -n "$(git ls-files --others --exclude-standard)" ]; then
    echo "${CYAN}Stashing local modifications before pulling change ID ${CHANGE_ID}...${NC}"
    git stash push -u -m "Auto-stash before pulling change ID ${CHANGE_ID}"
  fi

  echo "${YELLOW}Fetching ${REF_LINK}...${NC}"
  git fetch origin "$REF_LINK" && git reset --hard FETCH_HEAD

  echo "${GREEN}âœ… Change ID ${CHANGE_ID} pulled successfully.${NC}"
}

# Main command dispatcher
case "${1:-}" in
-m | --my-changes)
  check_gerrit_ssh
  echo "${BLUE}[ Your Open Changes ]${NC}\n"
  {
    header
    query_gerrit "owner:self status:open"
  } | print_table
  ;;

-r | --assigned)
  check_gerrit_ssh
  echo "${BLUE}[ Changes Assigned to You for Review ]${NC}\n"
  {
    header
    query_gerrit "reviewer:self status:open"
  } | print_table
  ;;

-d | --review-debt)
  check_gerrit_ssh
  echo "${BLUE}[ Review Debt by Developer ]${NC}\n"
  {
    header
    query_gerrit "status:open AND (reviewer:self OR owner:self)"
  } | print_table
  ;;

-s | --stale-reviews)
  check_gerrit_ssh
  AGE="${2:-7d}"
  echo "${BLUE}[ Stale Reviews Older than $AGE ]${NC}\n"
  {
    header
    query_gerrit "status:open age:>$AGE"
  } | print_table
  ;;

-t | --topic)
  check_gerrit_ssh
  if [ -z "${2:-}" ]; then
    echo "${RED}Usage: $0 --topic <topic>${NC}"
    exit 1
  fi
  echo "${BLUE}[ Changes in Topic: $2 ]${NC}\n"
  {
    header
    query_gerrit "topic:$2"
  } | print_table
  ;;

-b | --bug)
  check_gerrit_ssh
  if [ -z "${2:-}" ]; then
    echo "${RED}Usage: $0 --bug <BUG-ID>${NC}"
    exit 1
  fi
  echo "${BLUE}[ Changes Mentioning Bug: $2 ]${NC}\n"
  {
    header
    query_gerrit "message:$2"
  } | print_table
  ;;

-p | --project)
  check_gerrit_ssh
  if [ -z "${2:-}" ]; then
    echo "${RED}Usage: $0 --project <PROJECT-NAME>${NC}"
    exit 1
  fi
  echo "${BLUE}[ Open Changes by Project: $2 ]${NC}\n"
  ssh gerrit gerrit query "status:open project:$2" --format=JSON |
    jq -r 'select(.type != "stats") | .project' | sort | uniq -c | sort -nr
  ;;

-a | --amend)
  check_git_dir
  echo "${CYAN}Amending current commit...${NC}"
  git add .
  git commit --amend --no-edit
  ;;

-P | --pull-change)
  check_git_dir
  if [ -z "${2:-}" ]; then
    echo "${RED}Usage: $0 --pull-change <CHANGE-ID> [PS]${NC}"
    exit 1
  fi
  CHANGE_ID="${2:-}"
  PATCHSET_ID="${3:-}"
  pull_submission_to_local $CHANGE_ID $PATCHSET_ID
  ;;

-M | --merge)
  check_git_dir
  if [ -z "${2:-}" ]; then
    echo "${RED}Usage: $0 --merge <BRANCH-NAME>${NC}"
    exit 1
  fi
  git fetch origin
  echo "${CYAN}Merging origin/$2 into current branch (no commit)...${NC}"
  git merge --no-ff --no-commit "origin/$2"
  ;;

-S | --submit-merge)
  check_git_dir
  if [ -z "${2:-}" ]; then
    echo "${RED}Usage: $0 --submit-merge <BRANCH-NAME>${NC}"
    exit 1
  fi
  current_branch=$(git symbolic-ref --short HEAD)
  echo "${CYAN}Submitting merge commit from $2 for review...${NC}"
  git push "$2" "HEAD:refs/for/$current_branch"
  ;;

-T | --target-branch)
  check_git_dir
  check_gerrit_ssh

  target_branch="${2:-$(git rev-parse --abbrev-ref HEAD)}"
  project_name=$(basename -s .git "$(git remote get-url origin)")

  echo "${BLUE}[ Changes Targeting Current Branch: ${PURPLE}$target_branch${BLUE} ]${NC}\n"

  {
    header
    query_gerrit "status:open project:$project_name branch:$target_branch"
  } | print_table
  ;;

-u | --submit)
  check_git_dir
  if ! command -v rfc >/dev/null 2>&1; then
    echo "${RED}[ERROR]${NC} The 'rfc' command is not installed or not in PATH."
    exit 1
  fi
  echo "${CYAN}Submitting current changes for review using rfc...${NC}"
  current_branch=$(git symbolic-ref --short HEAD)
  if [ -z "${2:-}" ]; then
    echo "${YELLOW}No branch is specified, using current branch: ${PURPLE}$current_branch${NC}"
  fi
  rfc "${2:-$current_branch}"
  ;;

-h | --help | *)
  echo "${CYAN}Gerrit CLI Power Tool${NC}"
  echo ""
  echo "Usage: $0 [option]"
  echo ""
  echo "Options:"
  echo "  -a, --amend                              Stage all modifications and amend the current commit"
  echo "  -M, --merge <BRANCH>                     Fetch and merge latest updates from the target branch into your current one (no commit)"
  echo "  -S, --submit-merge <BRANCH>              Push a pure merge commit for review"
  echo "  -u, --submit [BRANCH]                    Push current changes for review using 'rfc'. Uses current branch if none is specified"
  echo "  -P, --pull-change <CHANGE-ID> [PS]       Pull a Gerrit change by change ID and optional patchset ID"
  echo "                                           If patchset ID is omitted, pulls the latest patchset automatically"
  echo "  -T, --target-branch [BRANCH]             List all the Change ID targeting specified branch (default: current branch()"
  echo "  -m, --my-changes                         Show open changes owned by you"
  echo "  -r, --assigned                           Show changes assigned to you for review"
  echo "  -d, --review-debt                        Show open reviews involving you (review debt)"
  echo "  -s, --stale-reviews [DAYS]               Show reviews older than N days (default: 7)"
  echo "  -t, --topic <NAME>                       Show all changes under a topic"
  echo "  -b, --bug <BUG-ID>                       Show changes mentioning a specific bug ID"
  echo "  -p, --project <PROJECT>                  Show open changes in a project"
  echo "  -h, --help                               Show this help message"
  echo ""
  ;;
esac
