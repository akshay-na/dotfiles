# ---------------------------------------------------------------
# Dotfiles Environment Initialization Script
# ---------------------------------------------------------------
# Purpose:
# This script initializes environment settings and tools commonly used across
# multiple shells (e.g., Zsh and Bash). It includes:
# - Essential path configurations for tools like Pyenv, NVM, and Homebrew.
# - Functions for checking and updating the dotfiles repository.
# - Tool initializations for Pyenv, NVM, and optional Tmux auto-start.
# - Customizations for improved navigation with Zoxide.

# Usage:
# Place this file as `.commonrc` in the home directory and source it in `.bashrc`
# or `.zshrc` for automatic initialization. Ensure tools like Pyenv, NVM, and Tmux
# are installed for optimal usage. For personal adjustments, add configurations
# in `.commonrc_local` to keep them separate from core settings.
# ---------------------------------------------------------------

# ---------------------------------------------------------------
# Define Environment Variables
# ---------------------------------------------------------------
export DOTFILES_DIR="$HOME/dotfiles"                                 # Root directory for dotfiles
export ASDF_DATA_DIR="$HOME/.asdf"                                   # asdf directory
export PATH="$PATH:$HOME/.asdf/bin:$HOME/bin:/opt/nvim-linux64/bin" # Additional paths
export PATH=$PATH:"~/bin":"~/.local/bin"                             # Add local binaries to PATH
HISTSIZE=10000                                                       # Shell history size

if [ -n "$PS1" ] && [ -t 1 ]; then
    export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
    gpg-connect-agent updatestartuptty /bye >/dev/null 2>&1
fi

# Set dir colour to constent across the syste
export LS_COLORS="di=38;5;75:fi=38;5;252:ln=38;5;141:so=38;5;215:pi=38;5;136:bd=38;5;136:cd=38;5;136:su=38;5;208:sg=38;5;208:tw=38;5;168:ow=38;5;168:st=38;5;168:ex=38;5;114"
# ---------------------------------------------------------------
# Function Definitions
# ---------------------------------------------------------------

# Dotfiles Repository Update Checker
check_dotfiles_update() {
  # Run in a subshell to avoid changing the current directory in the parent shell
  (
    # Checks if the dotfiles repository is up-to-date and prompts for update if not
    cd "$DOTFILES_DIR" || return
    git fetch origin

    # Check if the local branch is behind the remote branch
    BEHIND_COUNT=$(git rev-list --count HEAD..origin/$(git rev-parse --abbrev-ref HEAD))

    # If there are commits in the remote that aren't in the local branch, prompt the user
    if [ "$BEHIND_COUNT" -gt 0 ]; then
      echo "\n\n🚀 Updates are available for your dotfiles repository!\n"

      # Create a nicely formatted box for the update prompt
      echo "┌──────────────────────────────────────────────┐"
      echo "│                                              │"
      echo "│   🌟 New updates have been detected! 🌟      │"
      echo "│                                              │"
      echo "│    Take a moment to review the changes:      │"
      echo "│                                              │"
      echo "└──────────────────────────────────────────────┘"

      # Show a summary of incoming changes for better user context
      echo "\nHere's a summary of new changes:"
      LOCAL=$(git rev-parse @)
      REMOTE=$(git rev-parse "@{u}")
      git log --oneline --decorate --color "$LOCAL..$REMOTE"

      # Prompt for update
      echo -e "\nDo you want to update now? (y/n):"
      read -r REPLY
      echo # Move to a new line
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        git pull
        echo "✅ Dotfiles repository updated successfully!"
      else
        echo "🚫 Update skipped. Remember to update later to stay in sync!"
      fi
    fi
  )
}

# ---------------------------------------------------------------
# Dotfiles Repository Initialization
# ---------------------------------------------------------------
if [ -d "$DOTFILES_DIR" ]; then
  { check_dotfiles_update; } > "$(tty)"
else
  # Clone dotfiles repository if not available
  git clone https://github.com/akshay-na/dotfiles "$DOTFILES_DIR"
fi

# Directory Navigation Helper (using Zoxide)
fcd() {
  # Quickly navigate to frequently accessed directories using Zoxide
  local dir
  dir=$(zoxide query -i --exclude "$HOME") && cd "$dir"
}

# ---------------------------------------------------------------
# Initializations and Conditions
# ---------------------------------------------------------------

# Load custom aliases and functions if available
[ -f ~/.aliases ] && source ~/.aliases
[ -f ~/.functions ] && source ~/.functions

# Automatically start tmux if not already inside a session
if command -v tmux >/dev/null 2>&1 && [[ -z "$TMUX" ]]; then
  tmux has-session -t default 2>/dev/null && tmux attach-session -t default || tmux new-session -s default
fi

# ---------------------------------------------------------------
# Homebrew Initialization (macOS specific)
# ---------------------------------------------------------------
if [ -d "/opt/homebrew/bin" ]; then
  export PATH="/opt/homebrew/bin:$PATH" # macOS (Homebrew)
elif [ -d "$HOME/.local/bin" ]; then
  export PATH="$HOME/.local/bin:$PATH" # Linux
fi

# ---------------------------------------------------------------
# Load Local Configurations
# ---------------------------------------------------------------

eval $(ssh-agent) >/dev/null 2>&1 &!

# Load custom local common configurations, if available
[ -f ~/.commonrc_local ] && source ~/.commonrc_local
