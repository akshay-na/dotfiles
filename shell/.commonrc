# ---------------------------------------------------------------
# Dotfiles Environment Initialization Script
# ---------------------------------------------------------------
# Purpose:
# This script initializes environment settings and tools commonly used across
# multiple shells (e.g., Zsh and Bash). It includes:
# - Essential path configurations for tools like Pyenv, NVM, and Homebrew.
# - Functions for checking and updating the dotfiles repository.
# - Tool initializations for Pyenv, NVM, and optional Tmux auto-start.
# - Customizations for improved navigation with Zoxide.

# Usage:
# Place this file as `.commonrc` in the home directory and source it in `.bashrc`
# or `.zshrc` for automatic initialization. Ensure tools like Pyenv, NVM, and Tmux
# are installed for optimal usage. For personal adjustments, add configurations
# in `.commonrc_local` to keep them separate from core settings.
# ---------------------------------------------------------------

# ---------------------------------------------------------------
# Define Environment Variables (Always Loaded)
# ---------------------------------------------------------------
export DOTFILES_DIR="$HOME/dotfiles"                                 # Root directory for dotfiles
export PATH="$PATH:$HOME/bin:$HOME/.local/bin:/opt/nvim-linux64/bin" # Additional paths
export HISTSIZE=10000                                                # Shell history size
export PODMAN_SYSTEMD_UNIT="enabled"                                 # Enable systemd unit for podman
export PODMAN_USERNS=keep-id                                         # Keep user namespaces for podman
export GPG_TTY=$(tty)                                                # Set GPG TTY for GPG agent

# ---------------------------------------------------------------
# Autossh configuration
# ---------------------------------------------------------------
export AUTOSSH_PORT=0                    # Disable legacy monitoring ports; rely on SSH's ServerAlive
export AUTOSSH_POLL=60                   # Poll interval in seconds for checking the tunnel health
export AUTOSSH_GATETIME=30               # Grace period (seconds) before autossh decides a connection is stuck in a restart loop
export AUTOSSH_LOGLEVEL=0                # Don't flood logs; log only important restarts
export AUTOSSH_LOGFILE=$HOME/autossh.log # Send all logging to syslog instead of stderr (nicer for systemd/launchd)

editors=(cursor code nano nvim vim vi)
for editor in "${editors[@]}"; do
  if command -v "$editor" >/dev/null 2>&1; then
    export EDITOR="$editor"
    break
  fi
done

# Set dir colour to constant across the system
export LS_COLORS='di=38;5;33:fi=38;5;250:ln=38;5;110:pi=38;5;174:so=38;5;173:bd=38;5;172:cd=38;5;172:or=38;5;208:ex=38;5;82:su=38;5;197:sg=38;5;197:tw=38;5;197:ow=38;5;197:st=38;5;197:mh=38;5;37'

# ---------------------------------------------------------------
# Homebrew Initialization (Always Loaded)
# ---------------------------------------------------------------
# Use case statement for faster Homebrew detection
case "$(uname -s)" in
Darwin)
  # macOS - check Apple Silicon first, then Intel
  if [ -x "/opt/homebrew/bin/brew" ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)" 2>/dev/null || true
  elif [ -x "/usr/local/bin/brew" ]; then
    eval "$(/usr/local/bin/brew shellenv)" 2>/dev/null || true
  fi
  ;;
Linux)
  # Linux - check multiple possible locations
  if [ -x "$HOME/homebrew/bin/brew" ]; then
    eval "$($HOME/homebrew/bin/brew shellenv)" 2>/dev/null || true
  elif [ -x "/home/linuxbrew/.linuxbrew/bin/brew" ]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)" 2>/dev/null || true
  elif [ -x "$HOME/.linuxbrew/bin/brew" ]; then
    eval "$($HOME/.linuxbrew/bin/brew shellenv)" 2>/dev/null || true
  elif [ -x "/usr/local/bin/brew" ]; then
    eval "$(/usr/local/bin/brew shellenv)" 2>/dev/null || true
  fi
  ;;
esac

# ---------------------------------------------------------------
# SSH Authentication Agent Setup (GPG/YubiKey or ssh-agent)
# ---------------------------------------------------------------
# Use GPG agent if available, otherwise fall back to ssh-agent
if command -v gpgconf >/dev/null 2>&1; then
  export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
  gpgconf --launch gpg-agent
  gpg-connect-agent updatestartuptty /bye >/dev/null 2>&1
elif command -v ssh-agent >/dev/null 2>&1; then
  if [ -z "$SSH_AUTH_SOCK" ] || ! ssh-add -l >/dev/null 2>&1; then
    eval $(ssh-agent) >/dev/null 2>&1
  fi
fi

# ---------------------------------------------------------------
# Load Aliases and Functions (Always Loaded - Needed for Git/YubiKey operations)
# ---------------------------------------------------------------
# Load custom aliases and functions if available (needed for Git operations and YubiKey)
[ -f "$HOME/.aliases" ] && source "$HOME/.aliases"
[ -f "$HOME/.functions" ] && source "$HOME/.functions"

# ---------------------------------------------------------------
# Interactive-Only Configurations
# ---------------------------------------------------------------
# Check if we have a terminal and the shell is interactive
if [[ -t 0 ]] && {
  [[ -n "$ZSH_VERSION" ]] && [[ -o interactive ]] ||
    [[ -n "$BASH_VERSION" ]] && [[ $- == *i* ]] ||
    [[ -n "$PS1" ]]
}; then
  # Network connectivity check for background operations
  PING_RESULT=false
  if ping -c 1 -W 1 1.1.1.1 >/dev/null 2>&1; then
    PING_RESULT=true
    {
      cd $DOTFILES_DIR || return
      git fetch origin $(git symbolic-ref --short HEAD) -q
    } &
    disown
  fi

  # Automatically start tmux if not already inside a session (interactive only)
  if [[ -z "$TMUX" ]] && command -v tmux >/dev/null; then
    tmux attach-session -t default 2>/dev/null || tmux new-session -s default
  fi

  # Dotfiles Repository Update Check (interactive only)
  if [ -d "$DOTFILES_DIR" ]; then
    if [ "$PING_RESULT" = true ]; then
      check_dotfiles_update
    fi
  else
    # Clone dotfiles repository if not available
    git clone https://github.com/akshay-na/dotfiles "$DOTFILES_DIR"
  fi
else
  PATH="$PATH:$HOME/.local/share/mise/shims" # Load mise shims
fi

# ---------------------------------------------------------------
# Load Local Configurations (Always Loaded)
# ---------------------------------------------------------------
[ -f "$HOME/.commonrc_local" ] && source "$HOME/.commonrc_local"
