# ---------------------------------------------------------------
# Custom Functions
# ---------------------------------------------------------------
# Purpose:
# This `.functions` file provides a range of functions
# to streamline frequently used commands.

# Usage:
# Place this file as `.functions` in the home directory and source it in `.bashrc` or `.zshrc`.
# For additional custom functions, add them in `.functions_local.sh` as suggested, to avoid modifying this core file.
# ---------------------------------------------------------------

# -------------------------------------------------------------------------------
# Function: delete_branch
# Purpose: Delete a specified Git branch both locally and remotely.
# Usage: delete_branch <branch-name>
# -------------------------------------------------------------------------------
delete_branches() {
  if [ $# -eq 0 ]; then
    echo "Usage: delete_branches <branch1> [branch2] ..."
    return 1
  fi

  for branch in "$@"; do
    echo "Processing branch: '$branch'"

    # Check if the branch exists locally
    if git show-ref --verify --quiet "refs/heads/$branch"; then
      echo "  Deleting '$branch' locally..."
      git branch -d "$branch"
    else
      echo "  '$branch' does not exist locally."
    fi

    # Check if the branch exists on the remote repository
    if git ls-remote --heads origin "$branch" | grep "$branch" >/dev/null; then
      echo "  Deleting '$branch' on remote..."
      git push origin --delete "$branch"
    else
      echo "  '$branch' does not exist on remote."
    fi

    echo
  done
}

_delete_branches_completions() {
  local cur="${COMP_WORDS[COMP_CWORD]}"
  # Retrieve all local branches.
  local branches=$(git branch --format='%(refname:short)' 2>/dev/null)
  # Generate completions from the list of local branches.
  COMPREPLY=($(compgen -W "${branches}" -- "$cur"))
}

# Enable tab-completion for the delete_branches command
if [ -n "$BASH_VERSION" ]; then
  # Bash completion
  complete -F _delete_branches_completions delete_branches
elif [ -n "$ZSH_VERSION" ]; then
  # Zsh completion
  compdef _delete_branches_completions delete_branches
fi

# -------------------------------------------------------------------------------
# Function: reload
# Purpose: Reload the shell configuration file for either Zsh or Bash.
# Usage: reload
# -------------------------------------------------------------------------------
reload() {
  if [ -n "$ZSH_VERSION" ]; then
    # Reload Zsh configuration
    source $HOME/.zshrc
    echo "Zsh configuration reloaded!"
  elif [ -n "$BASH_VERSION" ]; then
    # Reload Bash configuration
    source $HOME/.bashrc
    echo "Bash configuration reloaded!"
  else
    # Fallback for unknown shells
    echo "Unknown shell. Please reload your configuration manually."
  fi
}

# -------------------------------------------------------------------------------
# Function: extract
# Purpose: Extract various archive types based on file extension.
# Usage: extract <archive-file>
# -------------------------------------------------------------------------------
extract() {
  if [ -f "$1" ]; then
    case "$1" in
    *.tar.bz2) tar xjf "$1" ;; # Extract tar.bz2 archives
    *.tar.gz) tar xzf "$1" ;;  # Extract tar.gz archives
    *.bz2) bunzip2 "$1" ;;     # Extract bz2 files
    *.rar) unrar x "$1" ;;     # Extract rar archives
    *.gz) gunzip "$1" ;;       # Extract gz files
    *.tar) tar xf "$1" ;;      # Extract tar archives
    *.tbz2) tar xjf "$1" ;;    # Extract tbz2 archives
    *.tgz) tar xzf "$1" ;;     # Extract tgz archives
    *.zip) unzip "$1" ;;       # Extract zip files
    *.7z) 7z x "$1" ;;         # Extract 7z archives
    *) echo "Cannot extract '$1' (unsupported file type)" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Create and enter directory
mkcd() {
  mkdir -p "$1" && cd "$1"
}

# Kill process by name
kp() {
  local pid
  pid=$(ps aux | grep "$1" | grep -v grep | awk '{print $2}')
  if [ -n "$pid" ]; then
    kill -9 "$pid"
    echo "Killed process $pid"
  else
    echo "No process found matching '$1'"
  fi
}

# Quick file creation
touchf() {
  mkdir -p "$(dirname "$1")" && touch "$1"
}

# Directory Navigation Helper (using Zoxide)
fcd() {
  # Quickly navigate to frequently accessed directories using Zoxide
  local dir
  dir=$(zoxide query -i --exclude "$HOME") && cd "$dir"
}

# Check for updates in the dotfiles repository
check_dotfiles_update() {
  # Run in a subshell to avoid changing the current directory in the parent shell
  (
    # Checks if the dotfiles repository is up-to-date and prompts for update if not
    cd "$DOTFILES_DIR" || return

    # Check if the local branch is behind the remote branch
    BEHIND_COUNT=$(git rev-list --count HEAD..@{u} 2>/dev/null || echo 0)

    # If there are commits in the remote that aren't in the local branch, prompt the user
    if [ "$BEHIND_COUNT" -gt 0 ]; then
      echo "\n\n🚀 Updates are available for your dotfiles repository!\n"

      # Create a nicely formatted box for the update prompt
      echo "┌──────────────────────────────────────────────┐"
      echo "│                                              │"
      echo "│   🌟 New updates have been detected! 🌟      │"
      echo "│                                              │"
      echo "│    Take a moment to review the changes:      │"
      echo "│                                              │"
      echo "└──────────────────────────────────────────────┘"

      # Show a summary of incoming changes for better user context
      echo "\nHere's a summary of new changes:"
      LOCAL=$(git rev-parse @)
      REMOTE=$(git rev-parse "@{u}")
      git log --oneline --decorate --color "$LOCAL..$REMOTE"

      # Prompt for update
      echo -e "\nDo you want to update now? (y/n):"
      read -r REPLY
      echo # Move to a new line
      if [[ $REPLY =~ ^[Yy]$ ]]; then
        git pull
        echo "✅ Dotfiles repository updated successfully!"
      else
        echo "🚫 Update skipped. Remember to update later to stay in sync!"
      fi
    fi
  )
}

# -------------------------------------------------------------------------------
# Function: archive
# Purpose: Create an archive from files or directories.
#          The user selects the desired archive format interactively.
# Usage: archive <base-name> <file(s)/directory(ies)>
# -------------------------------------------------------------------------------
archive() {
  if [ "$#" -lt 2 ]; then
    echo "Usage: archive <base-name> <file(s)/directory(ies) to archive>"
    return 1
  fi

  base_name="$1"
  shift

  # Present the format selection menu to the user
  echo "Select archive format:"
  echo "1) tar.bz2"
  echo "2) tar.gz"
  echo "3) tar.xz"
  echo "4) tar (uncompressed)"
  echo "5) zip"
  echo "6) 7z"
  read -p "Enter your choice [1-6]: " choice

  # Create the archive based on the user's selection
  case "$choice" in
  1)
    archive_name="${base_name}.tar.bz2"
    tar cjf "$archive_name" "$@" || return 1
    ;;
  2)
    archive_name="${base_name}.tar.gz"
    tar czf "$archive_name" "$@" || return 1
    ;;
  3)
    archive_name="${base_name}.tar.xz"
    tar cJf "$archive_name" "$@" || return 1
    ;;
  4)
    archive_name="${base_name}.tar"
    tar cf "$archive_name" "$@" || return 1
    ;;
  5)
    archive_name="${base_name}.zip"
    zip -r "$archive_name" "$@" || return 1
    ;;
  6)
    archive_name="${base_name}.7z"
    7z a "$archive_name" "$@" || return 1
    ;;
  *)
    echo "Invalid choice. Aborting."
    return 1
    ;;
  esac

  echo "Archive created: $archive_name"
}

# -------------------------------------------------------------------------------
# Function: gitworktree_add
# Purpose: Add a Git worktree for a specified branch.
#          If the branch does not exist remotely, it creates and pushes it.
# Usage: gitworktree_add <branch-name>
# -------------------------------------------------------------------------------
function git_worktree_add() {
  # Assign branch name and define the worktree path relative to the current repository root
  BRANCH_NAME=$1
  SANITIZED_BRANCH_PATH=$(echo "$BRANCH_NAME" | tr '/' '_')
  WORKTREE_PATH="../$SANITIZED_BRANCH_PATH"

  # Get the root directory of the current Git repository
  GIT_ROOT=$(git rev-parse --show-toplevel)

  # Convert to Unix-style path if running on Windows environments (Git Bash/Cygwin)
  case "$(uname -s)" in
  MINGW* | CYGWIN*)
    GIT_ROOT=$(cygpath -u "$GIT_ROOT")
    ;;
  esac

  # Check if inside a Git repository
  if [ -z "$GIT_ROOT" ]; then
    echo "Error: This command must be run inside a Git repository."
    return 1
  fi

  cd "$GIT_ROOT"

  # Check if the branch exists on the remote repository
  REMOTE_BRANCH=$(git ls-remote --heads origin "$BRANCH_NAME")

  if [ -z "$REMOTE_BRANCH" ]; then
    # Branch does not exist remotely; create a new branch and push it to remote
    echo "Branch '$BRANCH_NAME' does not exist remotely. Creating a new branch..."
    git branch "$BRANCH_NAME"
  else
    # Branch exists remotely; fetch and set it up locally
    echo "Branch '$BRANCH_NAME' exists remotely. Setting up locally..."
    git fetch origin "$BRANCH_NAME"
  fi

  # Add the new worktree based on the specified branch
  git worktree add --guess-remote "$WORKTREE_PATH" "$BRANCH_NAME"
  echo "Worktree added for branch '$BRANCH_NAME'."

  cd "$WORKTREE_PATH"
}

# -------------------------------------------------------------------------------
# Function: gac
# Purpose: Commit changes using semantic commit message prefixes.
#          Provides shortcuts for different types of commits.
# Usage: gac [ -a ] <shortcut> <commit message>
#        Use -a to amend the previous commit.
# -------------------------------------------------------------------------------
function gac() {
  # Display help if no arguments or help flag is provided
  if [ $# -eq 0 ] || [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "------"
    echo "Cannot commit without comments. Semantic reminder:"
    echo "chore:        c"
    echo "docs:         d"
    echo "feat:         f"
    echo "refactor:     r"
    echo "style:        s"
    echo "test:         t"
    echo "fix:          x"
    echo "perf:         p"
    echo "ci:           i"
    echo "build:        b"
    echo "revert:       v"
    echo "security:     sec"
    echo "localization: l10n"
    echo "internationalization: i18n"
    echo "------"
    echo "Use -a to amend the previous commit."
    return 1
  fi

  AMEND=false

  # Check if the first argument is the amend flag (-a)
  if [ "$1" = "-a" ]; then
    AMEND=true
    shift # Remove the amend flag from arguments
  fi

  # Use the first argument as the commit shortcut and the rest as the commit message
  SHORTCUT=$1
  shift
  COMMENT=$@

  # Map shortcut to the full commit message prefix
  case "$SHORTCUT" in
  c) SHORTCUT="chore:" ;;
  d) SHORTCUT="docs:" ;;
  f) SHORTCUT="feat:" ;;
  r) SHORTCUT="refactor:" ;;
  s) SHORTCUT="style:" ;;
  t) SHORTCUT="test:" ;;
  x) SHORTCUT="fix:" ;;
  p) SHORTCUT="perf:" ;;                    # Performance improvements
  i) SHORTCUT="ci:" ;;                      # Continuous Integration changes
  b) SHORTCUT="build:" ;;                   # Build system changes
  v) SHORTCUT="revert:" ;;                  # Revert previous commits
  sec) SHORTCUT="security:" ;;              # Security updates
  l10n) SHORTCUT="localization:" ;;         # Localization updates
  i18n) SHORTCUT="internationalization:" ;; # Internationalization changes
  esac

  # Stage all changes
  git add -A

  # Commit changes, either amending the previous commit or creating a new one
  if [ "$AMEND" = true ]; then
    git commit --amend -m "$SHORTCUT $COMMENT"
  else
    git commit -m "$SHORTCUT $COMMENT"
  fi

  return 0
}

# Function to install dependencies using pnpm with optional flags
install_pnpm() {
  local use_shamefully_hoist=false
  local remove_lock=false

  # Define colors for better output readability
  GREEN='\033[0;32m'
  YELLOW='\033[1;33m'
  RED='\033[0;31m'
  NC='\033[0m' # No Color

  # Help section
  if [[ "$1" == "--help" ]]; then
    echo -e "${GREEN}Usage:${NC} install_pnpm [OPTIONS]"
    echo -e "Installs dependencies using pnpm with optional flags."
    echo
    echo -e "${YELLOW}Options:${NC}"
    echo -e "  --shamefully-hoist   Install dependencies with the --shamefully-hoist flag"
    echo -e "  --remove-lock        Delete the pnpm-lock.yaml file after installation"
    echo -e "  --help               Show this help message"
    return 0
  fi

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case "$1" in
    --shamefully-hoist)
      use_shamefully_hoist=true
      shift
      ;;
    --remove-lock)
      remove_lock=true
      shift
      ;;
    *)
      echo -e "${RED}Unknown option:${NC} $1"
      echo "Run 'install_pnpm --help' for usage information."
      return 1
      ;;
    esac
  done

  # Construct the pnpm install command
  local install_cmd="pnpm install"
  if [ "$use_shamefully_hoist" = true ]; then
    install_cmd+=" --shamefully-hoist"
  fi

  # Run the install command
  echo -e "${GREEN}Running:${NC} $install_cmd"
  eval "$install_cmd"

  # Remove lock file if required
  if [ "$remove_lock" = true ]; then
    echo -e "${YELLOW}Removing pnpm-lock.yaml...${NC}"
    rm -f pnpm-lock.yaml
  fi
}

# Autocomplete function
_install_pnpm_completions() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD - 1]}"
  opts="--shamefully-hoist --remove-lock --help"

  # Provide matching options
  COMPREPLY=($(compgen -W "$opts" -- "$cur"))
  return 0
}

# Enable autocomplete for install_pnpm function
if [ -n "$BASH_VERSION" ]; then
  # Bash completion
  complete -F _install_pnpm_completions install_pnpm
elif [ -n "$ZSH_VERSION" ]; then
  # Zsh completion
  compdef _install_pnpm_completions install_pnpm
fi

# VSCode directory jumping using Zoxide and Fzf
_vscode_z() {
  local dir
  if [[ -n "$1" ]]; then
    dir=$(zoxide query "$1") # Jump directly if an argument is provided
  else
    dir=$(zoxide query -l | fzf) # Otherwise, show fzf selection
  fi

  if [[ -n "$dir" ]]; then
    code "$dir"
  else
    echo "No directory selected."
  fi
}

kill_port() {
  local port="$1"

  # Check if port is provided
  if [ -z "$port" ]; then
    echo "Usage: kill_port <port-number>"
    return 1
  fi

  # Get process info before killing
  local process_info=$(lsof -i :"$port" 2>/dev/null | awk 'NR>1 {print $1, $2, $9}')

  if [ -z "$process_info" ]; then
    echo "Port $port is not in use."
    return 0
  fi

  echo "Port $port is in use by:"
  echo "$process_info" | while read -r command pid address; do
    echo "  $command (PID: $pid) on $address"
  done

  # Kill the processes
  local pids=$(lsof -ti:"$port" 2>/dev/null)
  if [ -n "$pids" ]; then
    echo "Killing process(es) with PID(s): $pids"
    echo "$pids" | xargs kill -9
    echo "Process(es) killed successfully."
  fi
}

# Load custom local common configurations, if available
[ -f $HOME/.functions_local ] && source $HOME/.functions_local
