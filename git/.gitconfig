############################################################## COMMON ############################################################

[alias]
  amend       = commit --amend --no-edit  # Amend the last commit without modifying the message
  last        = log -1 HEAD  # Show the latest commit
  save        = "!f() { git stash save \"ðŸš€ WIP $*\"; }; f"  # Stash current changes with a WIP message
  unstage     = reset HEAD --  # Unstage changes without affecting working directory
  sync        = "!f() { git pull origin \"$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')\"; }; f"
  ignore      = update-index --assume-unchanged  # Ignore the files from the version on local repo
  include     = update-index --no-assume-unchanged # Include the files from the version on local repo
  revert-file = "!f() { git checkout -- \"$1\"; }; f"  # Reset a single file to HEAD (restore last committed version)
  pop         = "!f() { \
      echo 'Available stashes:'; \
      git stash list --pretty=format:'%C(yellow)%gd%C(reset): %s'; \
      echo; \
      read -p 'Enter stash number to pop (e.g., 0): ' num; \
      git stash pop stash@{$num}; \
    }; f"  # Stash changes and then pop them
  set-ssh = "!f() { \
        git remote set-url origin $(git remote get-url origin | sed -E 's#https://([^/]+)/([^/]+)/(.*)#git@\\1:\\2/\\3#'); \
        echo 'Changed remote URL to use SSH\n'; \
        git remote -v; \
        echo; \
    }; f"
  set-https = "!f() { \
        git remote set-url origin $(git remote get-url origin | sed -E 's#git@([^:]+):([^/]+)/#https://\\1/\\2/#'); \
        echo 'Changed remote URL to use HTTPS\n'; \
        git remote -v; \
        echo; \
    }; f"


[branch]
  sort = -committerdate        # Sort branches by most recent commit date (descending)
  autosetupmerge = always      # Automatically set upstream branch when creating a new one
  autosetuprebase = always     # Always rebase instead of merge when pulling updates

[checkout]
  defaultParallelism = true  # Enable parallelism during checkout for faster operations

[color]
  ui = auto  # Enable automatic colorization in Git output

[commit]
  gpgsign = true  # Sign commits with GPG by default
	template = ~/.gitmessage # Use a custom commit message template for structured commits

[core]
  commitGraph         = true  # Enable commit graph for faster Git operations
  deltaBaseCacheLimit = 512M  # Increase delta base cache limit for large repositories
  excludesfile        = ~/.gitignore_global  # Add a global gitignore file
  attributesfile      = ~/.gitattributes_global  # Add a global gitattributes file
  fileMode            = false  # Ignore file permission changes
  fscache             = true  # Enable file system cache to improve performance
  fsmonitor           = true  # Enable filesystem monitoring for improved performance
  gitproxy            = auto  # Automatically select the appropriate proxy
  packedGitLimit      = 256m  # Increase the packed Git limit for handling larger packfiles
  packedGitWindowSize = 64m  # Adjust window size for optimized packfile processing
  preloadindex        = true  # Preload index to reduce I/O operations
  untrackedCache      = true  # Enable caching of untracked files for faster status checks
	editor              = code --wait # Use Visual Studio Code as the default Git editor, wait until it's closed

[credential]
  helper = cache --timeout = 3600  # Cache credentials for 1 hour

[diff]
  algorithm           = histogram  # Use the histogram algorithm for more accurate diffs
  colorMoved          = plain  # Highlight moved lines in diffs without additional styling
  compactionHeuristic = true  # Enable heuristic for better diff compaction
  mnemonicPrefix      = true  # Use mnemonic prefixes for easier readability
  renames             = true  # Detect file renames during diffs

[fetch]
  all       = true  # Fetch all remotes by default
  negotiate = true  # Use negotiation for faster fetches by transferring fewer objects
  prune     = true  # Remove stale branches from remote during fetch
  pruneTags = true  # Remove obsolete remote tags when fetching

[filter "lfs"]
  clean    = git-lfs clean -- %f  # Clean files for Git LFS
  process  = git-lfs filter-process  # Use Git LFS for filtering large files
  required = true  # Ensure LFS is used
  smudge   = git-lfs smudge -- %f  # Smudge files for Git LFS

[gc]
  auto                    = 256  # Set threshold for auto garbage collection
  pruneExpire             = now  # Prune unreachable objects immediately
  reflogExpire            = 90 days  # Extend reflog expiration period to 90 days
  reflogExpireUnreachable = 180 days  # Keep unreachable reflog entries for 180 days

[gpg]
  program = gpg  # Specify GPG program to use
  sign    = true  # Always sign commits and tags

[help]
  autocorrect = 1  # Automatically correct mistyped commands

[http]
  sslVerify = true  # Verify SSL certificates

[include]
  path = ~/.gitconfig_local  # Load additional user-specific configuration

[init]
  defaultBranch = main  # New git repo starts with main branch

[maintenance]
  auto = true                       # Enable automatic background Git maintenance
  strategy = incremental            # Use incremental maintenance (lightweight, non-blocking tasks)

[merge]
  conflictstyle = zdiff3   # Use zdiff3 style for clearer conflict markers with ancestor info
  summary = true           # Include a summary of merged commits in the merge commit message

[pager]
  diff = true  # Use pager for diff output
  log  = true  # Use pager for log output
  show = true  # Use pager for show command

[pack]
  autoDetach    = true  # Run garbage collection in the background
  autoPackLimit = 50  # Perform garbage collection after 50 loose objects
  compression   = 9  # Use maximum compression level for packfiles
  threads       = 4  # Set number of threads for packing (based on CPU cores)
  window        = 10  # Set delta compression window size
  windowMemory  = 100m  # Cap memory usage for delta compression

[pull]
  rebase = true  # Always rebase instead of merging when pulling

[push]
  autoSetupRemote = true  # Automatically set up remote tracking
  default         = simple  # Push the current branch to its upstream branch
  followTags      = true  # Push tags along with commits

[rebase]
  autoSquash  = true  # Automatically squash fixup commits
  autoStash   = true  # Stash changes before rebasing to prevent conflicts
  autoUpgrade = true  # Automatically use the improved rebase merge behavior
  updateRefs  = true  # Update branch references after rebase
  verbose     = true  # Show detailed output during rebase operations

[rerere]
  autoupdate = true  # Automatically update rerere records when conflicts are resolved
  enabled    = true  # Enable reuse of recorded resolution for merge conflicts

[status]
  branch             = true  # Show branch information in status
  showUntrackedFiles = all  # Show all untracked files
  showWorktreeGitDir = true  # Display the Git directory when using worktrees

[tag]
  gpgSign = true  # Always sign tags with GPG
  sort    = version:refname  # Sort tags based on version

[worktree]
  bare               = false  # Worktrees are not bare repositories
  clean              = true  # Clean worktrees automatically
  prune              = true  # Automatically remove stale worktrees
  recomputeUntracked = true  # Recompute untracked files in worktrees

# Use SSH instead of HTTPS for all Push OPs.
# Set fetch url manually on repo level.

[url "git@github.com:"]
    pushInsteadOf = https://github.com/

[url "git@gitlab.com:"]
    pushInsteadOf = https://gitlab.com/

[url "git@bitbucket.org:"]
    pushInsteadOf = https://bitbucket.org/

############################################################## CHANGES BASED ON SYSTEM ############################################################


#Create a new file called .gitconfig_local and make the followign changes there.

# [includeIf "hasconfig:remote.*.url:github.com"]
#   [user]
# name       = YOUR_GITHUB_USERNAME # Set user name for GitHub
# email      = YOUR_GITHUB_EMAIL@users.noreply.github.com # Set email for GitHub
# signingkey = YOUR_GITHUB_GPG_KEY # Set GPG signing key for GitHub

# [includeIf "hasconfig:remote.*.url:gitlab.com"]
#   [user]
# name       = YOUR_GITLAB_USERNAME # Set user name for GitLab
# email      = YOUR_GITLAB_EMAIL@users.noreply.gitlab.com # Set email for GitLab
# signingkey = YOUR_GITLAB_GPG_KEY # Set GPG signing key for GitLab